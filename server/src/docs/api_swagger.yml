swagger: "2.0"
info:
  description: "This is the documentation of SendIT API hosted on Heroku"
  version: "1.0.0"
  title: "SendIT"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "oesukam@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "andela-sendit-api.herokuapp.com"
basePath: "/api/v1"
tags:
- name: "auth"
  description: "Access to authentification ressources"
- name: "parcels"
  description: "Access to parcels ressources"
- name: "users"
  description: "Access to users ressources"
- name: "admin"
  description: "Groups admin ressources"
schemes:
- "https"
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  JWT_Token_Admin:
    type: apiKey
    in: header
    name: Authorization
  JWT_Token_User:
    type: apiKey
    in: header
    name: Authorization
paths:
  /auth/login:
    post:
      summary: "Logs registered user"
      tags:
        - "auth"
      operationId: authLogin
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/UserLogin"
      responses:
        '200':
          description: return the basic user information
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: "#/definitions/User"
        '404':
          description: Unregistered user
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
        '401':
          description: Email and password don't match
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
  /auth/signup:
    post:
      summary: "Register new user"
      tags:
        - "auth"
      operationId: authSignup
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/UserSignup"
      responses:
        '201':
          description: return the basic user information
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: "#/definitions/User"
  /users:
    get:
      summary: "Fetch a list of users by Admins"
      security:
        - JWT_Token_Admin: []
      tags:
        - "users"
        - "admin"
      operationId: getAllUsers
      parameters: 
        - name: Authorization
          in: header
          required: true
          type: string
      responses:
        '200':
          description: return list of users
  /users/{userId}:
    put:
      summary: "Update user's names, birth date, province, district and city"
      security:
        - JWT_Token_User: []
      tags:
        - "users"
      operationId: updateUser
      parameters: 
        - name: userId
          in: path
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: return the basic user information
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: "#/definitions/User"
    get:
      summary: "Fetch basic user's information"
      security:
        - JWT_Token_User: []
      tags:
        - "users"
      operationId: getUser
      parameters: 
        - name: userId
          in: path
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: return the basic user information
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                $ref: "#/definitions/User"
  /users/{userId}/parcels:
    get:
      summary: "Fetch a particular user's parcels"
      security:
        - JWT_Token_User: []
      tags:
        - "users"
      operationId: getUserParcels
      parameters: 
        - name: userId
          in: path
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: return a list of user's parcels
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: array
                items:
                  $ref: "#/definitions/Parcel"
  /users/{userId}/counters:
    get:
      summary: "Fetch a particular user's parcels counters"
      security:
        - JWT_Token_User: []
      tags:
        - "users"
      operationId: getUserParcelsCounters
      parameters: 
        - name: userId
          in: path
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: return the number of delivered, in progress and total of parcels
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                $ref: "#/definitions/Counters"
  /parcels:
    post:
      summary: "Create a new parcel"
      security:
        - JWT_Token_User: []
      tags:
        - "parcels"
      description: add a new parcel
      operationId: postParcel
      parameters:
        - name: Authorization
          in: header
          description: JWT Token
          required: true
          type: string
        - in: body
          name: body
          schema:
            $ref: "#/definitions/ParcelCreate"

      responses:
        '201':
          description: return the created parcel
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                $ref: "#/definitions/User"
    get:
      summary: "Fetch all parcels by Admins"
      security:
        - JWT_Token_Admin: []
      tags:
        - "parcels"
      description: return list of parcels
      operationId: getParcels
      parameters:
        - name: search
          in: query
          description: keywords for 
          required: false
          type: string
        - name: page
          in: query
          description: page number for pagination
          required: false
          type: number
      responses:
        '200':
          description: success response
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: array
                items:
                  $ref: "#/definitions/Parcel"
  /parcels/{id}:
    get:
      summary: "Fetch single parcel by ID"
      security:
        - JWT_Token_User: []
        - JWT_Token_Admin: []
      tags:
      - "parcels"
      description: return a single parcel
      operationId: getSingleParcel
      parameters:
        - name: id
          in: path
          description: uuid of a parcel
          required: true
          type: string
      responses:
        '200':
          description: return a parcel object
          
  /parcels/{id}/cancel:
    put:
      security:
        - JWT_Token_User: []
      tags:
        - "parcels"
      description: Cancel the specific parcel delivery order
      operationId: cancelParcel
      parameters:
        - name: id
          in: path
          description: uuid of a parcel
          required: true
          type: string
      responses:
        '200':
          description: return a parcel object
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string

  /parcels/{id}/presentLocation:
    put:
      security:
        - JWT_Token_Admin: []
      tags:
        - "parcels"
      description: Change the present location of a specific parcel delivery order
      operationId: updatePresentLocation
      parameters:
        - name: id
          in: path
          description: uuid of a parcel
          required: true
          type: string
      responses:
        '200':
          description: return a parcel object
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string

  /parcels/{id}/status:
    put:
      security:
        - JWT_Token_Admin: []
      tags:
        - "parcels"
      description: Change the status of a specific parcel delivery order
      operationId: updateStatus
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/ParcelStatus"
        - name: id
          in: path
          description: uuid of a parcel
          required: true
          type: string
              
      responses:
        '200':
          description: return a parcel object
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string

definitions:
  User:
    type: object
    properties:
      id:
        type: string
        format: uuid
      email:
        type: string
        format: email
      first_name:
        type: string
      last_name:
        type: string
      province:
        type: string
      district:
        type: string
      gender:
        type: string
      birth_date:
        type: string
      created_at:
        type: string
      updated_at:
        type: string
    required: 
      - id
      - email
      - first_name
      - last_name
      - province
      - district
      - gender
      - created_at
      - updated_at
  UserSignup:
    type: object
    properties:
      email:
        type: string
        format: email
      password:
        type: string
        pattern: '.{8,64}'
      first_name:
        type: string
      last_name:
        type: string
      province:
        type: string
      district:
        type: string
      gender:
        type: string
      birthDate:
        type: string
      city:
        type: string
    required: 
      - email
      - password
      - first_name
      - last_name
      - province
      - district
      - gender
  UserLogin:
    type: object
    properties:
      email:
        type: string
        format: email
        example: "user@email.com"
      password:
        type: string
        pattern: ".{6,60}"
        example: "user@user"
    required: 
      - email
      - password
  Parcel:
    type: object
    properties:
      id:
        type: string
        format: uuid
      user_id:
        type: string
        format: uuid
      from_province:
        type: string
      from_district:
        type: string
      to_province:
        type: string
      to_district:
        type: string
      receiver_names:
        type: string
      receiver_phone:
        type: string
      receiver_address:
        type: string
      weight:
        type: number
      price:
        type: number
    required: 
      - id
      - user_id
      - from_province
      - from_district
      - to_province
      - to_district
      - receiver_names
      - receiver_phone
      - receiver_address
      - weight
      - price
  ParcelCreate:
    type: object
    properties:
      from_province:
        type: string
      from_district:
        type: string
      to_province:
        type: string
      to_district:
        type: string
      receiver_names:
        type: string
      receiver_phone:
        type: string
      receiver_address:
        type: string
      weight:
        type: number
      price:
        type: number
    required: 
      - from_province
      - from_district
      - to_province
      - to_district
      - receiver_names
      - receiver_phone
      - receiver_address
      - weight
      - price
  ParcelStatus:
    type: object
    properties:
      status:
        type: string
        enum:
         - "Waiting Pickup"
         - "Pick Up"
         - "In Transit"
         - "Pending"
         - "Delivered"
  Counters:
    type: object
    properties:
      delivered:
        type: number
      in_progress:
        type: number
      total:
        type: number
